// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// FileOpener is an autogenerated mock type for the FileOpener type
type FileOpener struct {
	mock.Mock
}

// OpenFile provides a mock function with given fields: ctx, bucket, key
func (_m *FileOpener) OpenFile(ctx context.Context, bucket string, key string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, bucket, key)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileOpener interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileOpener creates a new instance of FileOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileOpener(t mockConstructorTestingTNewFileOpener) *FileOpener {
	mock := &FileOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
